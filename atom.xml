<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A true master is an eternal student.]]></title>
  <link href="http://chaoliu.github.io/atom.xml" rel="self"/>
  <link href="http://chaoliu.github.io/"/>
  <updated>2015-02-27T15:40:34+08:00</updated>
  <id>http://chaoliu.github.io/</id>
  <author>
    <name><![CDATA[ChaoLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Oh-my-zsh]]></title>
    <link href="http://chaoliu.github.io/blog/2015/02/27/oh-my-zsh/"/>
    <updated>2015-02-27T15:29:40+08:00</updated>
    <id>http://chaoliu.github.io/blog/2015/02/27/oh-my-zsh</id>
    <content type="html"><![CDATA[<blockquote><p>本文记录了mac os下zsh的配置与使用, 感觉zsh 相对 bash而言，易用性好一些</p></blockquote>

<!-- more -->


<h5><a href="http://ohmyz.sh/">http://ohmyz.sh/</a></h5>

<h5><a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a></h5>

<h4>1 安装</h4>

<p>via curl</p>

<p>curl -L <a href="https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a> | sh</p>

<p>via wget</p>

<p>wget <a href="https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a> -O - | sh</p>

<h4>2 配置</h4>

<p>安装好后，重新打开终端或新开一个Tab即可看到效果，当然你也可以通过编辑zshrc配置zsh，常用的配置项有主题以及插件：</p>

<blockquote><p>vim ~/.zshrc</p></blockquote>

<p><strong>主题</strong></p>

<blockquote><p>ZSH_THEME=&ldquo;gallois&rdquo;</p></blockquote>

<p><strong>插件</strong></p>

<blockquote><p>plugins=(git)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ssh Config]]></title>
    <link href="http://chaoliu.github.io/blog/2015/02/27/ssh-config/"/>
    <updated>2015-02-27T15:17:46+08:00</updated>
    <id>http://chaoliu.github.io/blog/2015/02/27/ssh-config</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Host work
</span><span class='line'>    HostName osys11.you.com
</span><span class='line'>    User chaoliu
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.gitconfig]]></title>
    <link href="http://chaoliu.github.io/blog/2015/02/27/dot-gitconfig/"/>
    <updated>2015-02-27T15:09:34+08:00</updated>
    <id>http://chaoliu.github.io/blog/2015/02/27/dot-gitconfig</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>color<span class="o">]</span>
</span><span class='line'>        <span class="nv">ui</span> <span class="o">=</span> auto
</span><span class='line'><span class="o">[</span>merge<span class="o">]</span>
</span><span class='line'>        <span class="nv">tool</span> <span class="o">=</span> vimdiff
</span><span class='line'><span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
</span><span class='line'>        <span class="nv">st</span> <span class="o">=</span> status
</span><span class='line'>        <span class="nv">ci</span> <span class="o">=</span> commit
</span><span class='line'>        <span class="nv">br</span> <span class="o">=</span> branch
</span><span class='line'>        <span class="nv">co</span> <span class="o">=</span> checkout
</span><span class='line'>        <span class="nv">df</span> <span class="o">=</span> diff
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress个人博客搭建]]></title>
    <link href="http://chaoliu.github.io/blog/2015/02/27/octopressge-ren-bo-ke-da-jian/"/>
    <updated>2015-02-27T14:42:47+08:00</updated>
    <id>http://chaoliu.github.io/blog/2015/02/27/octopressge-ren-bo-ke-da-jian</id>
    <content type="html"><![CDATA[<blockquote><p>文章内容主要记录Octopress个人博客搭建过程，部分内容参考自互联网</p></blockquote>

<!-- more -->


<h4>1.首先你可以登录Octopress主页一下主要功能</h4>

<p><a href="http://octopress.org">http://octopress.org</a></p>

<p>并且确保mac安装了以下工具：</p>

<p>git（应该是mac自带的）</p>

<p>ruby 1.9.3以上版本（可以在终端中用ruby &ndash;version查看版本是否满足）</p>

<p>缺少的请单独下载安装，这里就不具体讲了</p>

<h4>2.开始安装，mac上基本自带安装了git，所以直接打开终端，输入：</h4>

<p>git clone git://github.com/imathis/octopress.git octopress</p>

<p>之后git将会从github克隆下Octopress项目文件到本地的octopress目录，本地目录可以根据需要更改</p>

<p>cd octopress</p>

<p>进入Octopress项目根目录</p>

<h4>3.安装相关工具</h4>

<blockquote><p>sudo gem install bundler</p></blockquote>

<p>这过程可能会比较长,众所周知的原因，在国内已经无法使用gem的默认源了, 为gem更换淘宝的源</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem sources -l
</span><span class='line'>gem sources --remove https://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org/
</span><span class='line'>gem sources -l
</span></code></pre></td></tr></table></div></figure>


<p>好的，安装完成进入下一步</p>

<blockquote><p>bundle install</p></blockquote>

<p>开始安装具体的工具，这里没有碰到什么问题</p>

<p>再接使用rake工具安装默认的主题和配置</p>

<blockquote><p>rake install</p></blockquote>

<h4>4.接下来开始部署博客</h4>

<p>官方推荐了3种部署方式：</p>

<p>1-github，部署允许自定义域名，免费，好处是多人开发更方面，坏处是文件随时可以被任何人拉下来。</p>

<p>2-heroku，部署允许自定义域名，免费，并且是私有的，看样子这个比较适合我，后面的过程就用这个方法。</p>

<p>3-rsync，建议用来部署有自己服务器的个人博客。</p>

<p>本文主要介绍第一种方式：</p>

<p>首先设置github</p>

<blockquote><p>rake setup_github_pages[repo]</p></blockquote>

<p>repo填写github 上的 clone URL, 例如：<a href="https://github.com/chaoliu/chaoliu.github.com.git">https://github.com/chaoliu/chaoliu.github.com.git</a></p>

<p>接着可以修改_config.yml, 进行一些配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># ----------------------- #</span>
</span><span class='line'><span class="c">#      Main Configs       #</span>
</span><span class='line'><span class="c"># ----------------------- #</span>
</span><span class='line'>
</span><span class='line'>url: http://chaoliu.github.io
</span><span class='line'>title: A <span class="nb">true </span>master is an eternal student.
</span><span class='line'>subtitle:
</span><span class='line'>author: ChaoLiu
</span><span class='line'>simple_search: https://www.google.com/search
</span><span class='line'>description:
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>现在你可以通过</p>

<blockquote><p>new_post[title]           &ndash; begin a new post in source/_posts</p></blockquote>

<p>写文章了， 如果你觉得默认主题不是很好看，可以通过修改sass目录下的样式表进行样式调整</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strcpy ,strncpy ,strlcpy的用法]]></title>
    <link href="http://chaoliu.github.io/blog/2015/02/27/strcpy/"/>
    <updated>2015-02-27T13:14:43+08:00</updated>
    <id>http://chaoliu.github.io/blog/2015/02/27/strcpy</id>
    <content type="html"><![CDATA[<p>好多人已经知道利用strncpy替代strcpy来防止缓冲区越界。但是如果还要考虑运行效率的话，也许strlcpy是一个更好的方式。</p>

<!-- more -->


<h3>1. strcpy</h3>

<p>strcpy 是依据 /0 作为结束判断的，如果 to 的空间不够，则会引起 buffer overflow。strcpy 常规的实现代码如下（来自 OpenBSD 3.9）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="nf">strcpy</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">to</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">from</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>       <span class="kt">char</span> <span class="o">*</span><span class="n">save</span> <span class="o">=</span> <span class="n">to</span><span class="p">;</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(;</span> <span class="p">(</span><span class="o">*</span><span class="n">to</span> <span class="o">=</span> <span class="o">*</span><span class="n">from</span><span class="p">)</span> <span class="o">!=</span> <span class="err">&#39;</span><span class="o">/</span><span class="mi">0</span><span class="err">&#39;</span><span class="p">;</span> <span class="o">++</span><span class="n">from</span><span class="p">,</span> <span class="o">++</span><span class="n">to</span><span class="p">);</span>
</span><span class='line'>       <span class="k">return</span><span class="p">(</span><span class="n">save</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但通常，我们的 from 都来源于用户的输入，很可能是非常大的一个字符串，因此 strcpy 不够安全。</p>

<h3>2. strncpy</h3>

<p>在 ANSIC 中，strcpy 的安全版本是 strncpy</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="nf">strncpy</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s2</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>但 strncpy 其行为是很诡异的（不符合我们的通常习惯）。标准规定 n 并不是 sizeof(s1)，而是要复制的 char 的个数。一个最常见的问题，就是 strncpy 并不帮你保证 /0 结束。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'><span class="n">strncpy</span><span class="p">(</span> <span class="n">buf</span><span class="p">,</span> <span class="s">&quot;abcdefgh&quot;</span><span class="p">,</span> <span class="mi">8</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>看这个程序，buf 将会被 “abcdefgh” 填满，但却没有 /0 结束符了。</p>

<p>另外，如果 s2 的内容比较少，而 n 又比较大的话，strncpy 将会把之间的空间都用 /0 填充。这又出现了一个效率上的问题，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">80</span><span class="p">];</span>
</span><span class='line'><span class="n">strncpy</span><span class="p">(</span> <span class="n">buf</span><span class="p">,</span> <span class="s">&quot;abcdefgh&quot;</span><span class="p">,</span> <span class="mi">79</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的 strncpy 会填写 79 个 char，而不仅仅是 “abcdefgh” 本身。</p>

<p>strncpy 的标准用法为：（手工写上 /0）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">strncpy</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="err">&#39;</span><span class="o">/</span><span class="mi">0</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. strlcpy</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Copy src to string dst of size siz. At most siz-1 characters</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// will be copied. Always NUL terminates (unless siz == 0).</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Returns strlen(src); if retval &gt;= siz, truncation occurred.</span>
</span></code></pre></td></tr></table></div></figure>


<p>size_t   strlcpy(char <em>dst, const char </em>src, size_t siz);
而使用 strlcpy，就不需要我们去手动负责 /0 了，仅需要把 sizeof(dst) 告之 strlcpy 即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">strlcpy</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">path</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">len</span> <span class="o">&gt;=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">printf</span><span class="p">(</span><span class="s">&quot;src is truncated.&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且 strlcpy 传回的是 strlen(str)，因此我们也很方便的可以判断数据是否被截断。</p>

<p>strlcpy 并不属于 ANSIC，至今也还不是标准。 strlcpy 来源于 OpenBSD 2.4，之后很多 unix-like 系统的 libc 中都加入了 strlcpy 函数，我个人在 FreeBSD、Linux 里面都找到了 strlcpy。（Linux使用的是 glibc， glibc里面有 strlcpy，则所有的 Linux 版本也都应该有 strlcpy） 但 Windows 下是没有 strlcpy 的，对应的是strncpy和memset函数</p>

<h3>4. PHP</h3>

<figure class='code'><figcaption><span>php-src/main/strlcpy.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Copy src to string dst of size siz.  At most siz-1 characters</span>
</span><span class='line'><span class="cm"> * will be copied.  Always NUL terminates (unless siz == 0).</span>
</span><span class='line'><span class="cm"> * Returns strlen(src); if retval &gt;= siz, truncation occurred.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">PHPAPI</span> <span class="kt">size_t</span> <span class="n">php_strlcpy</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">siz</span><span class="p">)</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">dst</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">src</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">siz</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">register</span> <span class="kt">char</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="n">dst</span><span class="p">;</span>
</span><span class='line'>  <span class="k">register</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">src</span><span class="p">;</span>
</span><span class='line'>  <span class="k">register</span> <span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="n">siz</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Copy as many bytes as will fit */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">--</span><span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">d</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">s</span><span class="o">++</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">--</span><span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Not enough room in dst, add NUL and traverse rest of src */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">siz</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>      <span class="cm">/* NUL-terminate dst */</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">(</span><span class="n">s</span> <span class="o">-</span> <span class="n">src</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>   <span class="cm">/* count does not include NUL */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code class="C php-src/main/php.h">
/*
 * This is a fast version of strlcpy which should be used, if you
 * know the size of the destination buffer and if you know
 * the length of the source string.
 *
 * size is the allocated number of bytes of dst
 * src_size is the number of bytes excluding the NUL of src
 */

#define PHP_STRLCPY(dst, src, size, src_size)    \
 {                                           \
     size_t php_str_len;                     \
                                             \
     if (src_size &gt;= size)                    \
         php_str_len = size - 1;             \
     else                                    \
         php_str_len = src_size;             \
     memcpy(dst, src, php_str_len);          \
     dst[php_str_len] = '\0';                \
 }
</code></pre>
]]></content>
  </entry>
  
</feed>
